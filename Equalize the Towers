# JAVA CODE 

import java.util.*;

class Solution {
    public int minCost(int[] heights, int[] cost) {
        int n = heights.length;
        
        int[][] pairs = new int[n][2];
        for (int i = 0; i < n; i++) {
            pairs[i][0] = heights[i];
            pairs[i][1] = cost[i];
        }
        
        Arrays.sort(pairs, Comparator.comparingInt(a -> a[0]));
        
        long totalCost = 0;
        for (int[] pair : pairs) {
            totalCost += pair[1];
        }
        
        long currCost = 0;
        int medianHeight = 0;
        for (int i = 0; i < n; i++) {
            currCost += pairs[i][1];
            if (currCost >= (totalCost + 1) / 2) {
                medianHeight = pairs[i][0];
                break;
            }
        }
        
        long minTotalCost = 0;
        for (int i = 0; i < n; i++) {
            minTotalCost += (long) Math.abs(heights[i] - medianHeight) * cost[i];
        }
        
        return (int) minTotalCost;
    }
}


C++ CODE 

class Solution {
public:
    int minCost(vector<int>& heights, vector<int>& cost) {
        int n = heights.size();
        vector<pair<int, int>> pairs(n);
        
        // Step 1: Create pairs of height and cost
        for (int i = 0; i < n; ++i) {
            pairs[i] = {heights[i], cost[i]};
        }
        
        // Step 2: Sort pairs by height
        sort(pairs.begin(), pairs.end());
        
        // Step 3: Compute total cost sum
        long long totalCost = 0;
        for (auto& p : pairs) {
            totalCost += p.second;
        }
        
        // Step 4: Find weighted median
        long long currCost = 0;
        int medianHeight = 0;
        for (int i = 0; i < n; ++i) {
            currCost += pairs[i].second;
            if (currCost >= (totalCost + 1) / 2) {
                medianHeight = pairs[i].first;
                break;
            }
        }
        
        // Step 5: Calculate total cost to make all heights equal to medianHeight
        long long minTotalCost = 0;
        for (int i = 0; i < n; ++i) {
            minTotalCost += 1LL * abs(heights[i] - medianHeight) * cost[i];
        }
        
        return (int)minTotalCost;
    }
};
