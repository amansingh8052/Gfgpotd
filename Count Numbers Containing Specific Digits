# JAVA CODE 


class Solution {
    public int countValid(int n, int[] arr) {
        Set<Integer> badDigits = new HashSet<>();
        for (int digit : arr) {
            badDigits.add(digit);
        }

        // Total n-digit numbers
        int total = 9 * (int)Math.pow(10, n - 1);

        // Digits allowed (not in arr[])
        List<Integer> allowed = new ArrayList<>();
        for (int i = 0; i <= 9; i++) {
            if (!badDigits.contains(i)) {
                allowed.add(i);
            }
        }

        // If no allowed digits, all numbers contain at least one digit from arr[]
        if (allowed.size() == 0) return total;

        int countWithoutBadDigits = 0;

        // First digit cannot be 0
        for (int firstDigit : allowed) {
            if (firstDigit == 0) continue;
            countWithoutBadDigits += Math.pow(allowed.size(), n - 1);
        }

        // Valid numbers = total - those that use only allowed digits (i.e., no bad digits)
        return total - countWithoutBadDigits;
    }
}

#C++ CODE 


class Solution {
public:
    int countValid(int n, vector<int>& arr) {
        unordered_set<int> badDigits(arr.begin(), arr.end());

        // Total n-digit numbers: first digit (1-9), rest (0-9)
        int total = 9 * pow(10, n - 1);

        // Digits allowed (not in arr)
        vector<int> allowed;
        for (int i = 0; i <= 9; ++i) {
            if (badDigits.find(i) == badDigits.end()) {
                allowed.push_back(i);
            }
        }

        // If no allowed digits, all numbers have at least one bad digit
        if (allowed.empty()) return total;

        // Count numbers without any bad digit
        int countWithoutBad = 0;
        for (int digit : allowed) {
            if (digit == 0) continue; // first digit can't be 0
            countWithoutBad += pow(allowed.size(), n - 1);
        }

        return total - countWithoutBad;
    }
};
