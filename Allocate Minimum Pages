# JAVA CODE 


class Solution {
    public static int findPages(int[] arr, int k) {
    if (k > arr.length) {
        return -1;
    }
    int totalSum = 0, maxPages = 0;
    for (int pages : arr) {
        totalSum += pages;
        maxPages = Math.max(maxPages, pages);
    }
    int low = maxPages, high = totalSum;
    int result = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (isPossible(arr, k, mid)) {
            result = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return result;
}

private static boolean isPossible(int[] arr, int k, int maxPages) {
    int studentsRequired = 1;
    int currentSum = 0;
    for (int pages : arr) {
        if (currentSum + pages > maxPages) {
            studentsRequired++;
            currentSum = pages;
            if (studentsRequired > k) {
                return false;
            }
        } else {
            currentSum += pages;
        }
    }

    return true;
}

}

# C++ CODE 

class Solution {
public:
    int findPages(vector<int> &arr, int k) {
        if (k > arr.size()) return -1;
        
        int totalSum = 0, maxPages = 0;
        for (int pages : arr) {
            totalSum += pages;
            maxPages = max(maxPages, pages);
        }
        
        int low = maxPages, high = totalSum, result = -1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isPossible(arr, k, mid)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return result;
    }

private:
    bool isPossible(vector<int>& arr, int k, int maxPages) {
        int studentsRequired = 1;
        int currentSum = 0;
        
        for (int pages : arr) {
            if (currentSum + pages > maxPages) {
                studentsRequired++;
                currentSum = pages;
                if (studentsRequired > k) return false;
            } else {
                currentSum += pages;
            }
        }
        
        return true;
    }
};
