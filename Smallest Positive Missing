# JAVA CODE 

class Solution {
    public int missingNumber(int[] arr) {
        int n = arr.length;

        // Step 1: Place elements in their correct positions
        for (int i = 0; i < n; i++) {
            while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {
                // swap arr[i] and arr[arr[i] - 1]
                int temp = arr[i];
                arr[i] = arr[temp - 1];
                arr[temp - 1] = temp;
            }
        }

        // Step 2: Find the first location where index + 1 != value
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }

        // If all positions are correct, then the missing number is n+1
        return n + 1;
    }
}

#C++ CODE 

class Solution {
  public:
    int missingNumber(vector<int> &arr) {
        int n = arr.size();

        // Step 1: Place each number in its correct index if possible
        for (int i = 0; i < n; i++) {
            while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {
                swap(arr[i], arr[arr[i] - 1]);
            }
        }

        // Step 2: Find the first missing positive number
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }

        // If all are in correct places, then the missing number is n + 1
        return n + 1;
    }
};

