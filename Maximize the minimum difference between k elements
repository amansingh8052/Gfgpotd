# JAVA CODE 


class Solution {
    public int maxMinDiff(int[] arr, int k) {
        Arrays.sort(arr);
        int n = arr.length;
        
        int low = 1, high = arr[n - 1] - arr[0], ans = 0;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            if (canPlace(arr, k, mid)) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return ans;
    }
    
    private boolean canPlace(int[] arr, int k, int dist) {
        int count = 1;
        int last = arr[0];
        
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] - last >= dist) {
                count++;
                last = arr[i];
            }
            if (count >= k) return true;
        }
        
        return false;
    }
}


# C++ CODE 


class Solution {
  public:
    int maxMinDiff(vector<int>& arr, int k) {
        sort(arr.begin(), arr.end());
        int n = arr.size();
        
        int low = 1, high = arr[n - 1] - arr[0], ans = 0;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            if (canPlace(arr, k, mid)) {
                ans = mid;
                low = mid + 1; 
            } else {
                high = mid - 1;
            }
        }
        
        return ans;
    }
    
  private:
    bool canPlace(vector<int>& arr, int k, int dist) {
        int count = 1; 
        int last = arr[0];
        
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] - last >= dist) {
                count++;
                last = arr[i];
            }
            if (count >= k) return true;
        }
        return false;
    }
};
