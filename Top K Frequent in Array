# JAVA CODE 


class Solution {
    public ArrayList<Integer> topKFreq(int[] arr, int k) {
        HashMap<Integer, Integer> freq = new HashMap<>();
        for (int num : arr) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }

        int n = arr.length;
        List<List<Integer>> buckets = new ArrayList<>(n + 1);
        for (int i = 0; i <= n; i++) buckets.add(new ArrayList<>());

        for (Map.Entry<Integer, Integer> e : freq.entrySet()) {
            buckets.get(e.getValue()).add(e.getKey());
        }

        ArrayList<Integer> result = new ArrayList<>();
        for (int i = n; i >= 0 && result.size() < k; i--) {
            if (!buckets.get(i).isEmpty()) {
                Collections.sort(buckets.get(i), Collections.reverseOrder());
                for (int num : buckets.get(i)) {
                    result.add(num);
                    if (result.size() == k) break;
                }
            }
        }

        return result;
    }
}

# C++ CODE



class Solution {
  public:
    vector<int> topKFreq(vector<int> &arr, int k) {
        unordered_map<int, int> freq;
        for (int num : arr) {
            freq[num]++;
        }

        int n = arr.size();
        vector<vector<int>> bucket(n + 1);
        for (auto &p : freq) {
            bucket[p.second].push_back(p.first);
        }

        vector<int> result;
        for (int i = n; i >= 1 && result.size() < k; i--) {
            if (!bucket[i].empty()) {
                sort(bucket[i].begin(), bucket[i].end(), greater<int>());
                for (int num : bucket[i]) {
                    result.push_back(num);
                    if ((int)result.size() == k)
                        break;
                }
            }
        }

        return result;
    }
};
