# JAVA CODE 


class Solution {
    public ArrayList<Integer> minMaxCandy(int[] prices, int k) {
        Arrays.sort(prices);
        int n = prices.length;

        int minCost = 0;
        int i = 0, end = n - 1;
        while (i <= end) {
            minCost += prices[i];  // buy cheapest
            i++;
            end -= k;  // get k most expensive free
        }

        int maxCost = 0;
        int start = 0, j = n - 1;
        while (start <= j) {
            maxCost += prices[j];  // buy most expensive
            j--;
            start += k;  // get k cheapest free
        }

        ArrayList<Integer> result = new ArrayList<>();
        result.add(minCost);
        result.add(maxCost);
        return result;
    }
}

# C++ CODE 


class Solution {
public:
    vector<int> minMaxCandy(vector<int>& prices, int k) {
        sort(prices.begin(), prices.end());
        int n = prices.size();

        int minCost = 0;
        int i = 0, end = n - 1;
        while (i <= end) {
            minCost += prices[i]; // buy cheapest
            i++;
            end -= k; // get k most expensive for free
        }

        int maxCost = 0;
        int start = 0, j = n - 1;
        while (start <= j) {
            maxCost += prices[j]; // buy most expensive
            j--;
            start += k; // get k cheapest for free
        }

        return {minCost, maxCost};
    }
};
