# JAVA CODE 

import java.util.*;

class Solution {
    public static String smallestWindow(String s, String p) {
        if (s.length() < p.length()) return "";

        int[] target = new int[256];
        for (char c : p.toCharArray()) {
            target[c]++;
        }

        int[] window = new int[256];
        int required = p.length();
        int formed = 0;
        int left = 0, minLen = Integer.MAX_VALUE, start = -1;

        for (int right = 0; right < s.length(); right++) {
            char c = s.charAt(right);
            window[c]++;

            if (target[c] > 0 && window[c] <= target[c]) {
                formed++;
            }

            while (formed == required) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    start = left;
                }

                char leftChar = s.charAt(left);
                window[leftChar]--;
                if (target[leftChar] > 0 && window[leftChar] < target[leftChar]) {
                    formed--;
                }
                left++;
            }
        }

        return (start == -1) ? "" : s.substring(start, start + minLen);
    }
}


# C++ CODE 

class Solution {
  public:
    string smallestWindow(string &s, string &p) {
        if (s.size() < p.size()) return "";

        vector<int> target(256, 0), window(256, 0);
        for (char c : p) target[c]++;

        int required = p.size();
        int formed = 0;
        int left = 0, minLen = INT_MAX, start = -1;

        for (int right = 0; right < s.size(); right++) {
            char c = s[right];
            window[c]++;

            if (target[c] > 0 && window[c] <= target[c]) {
                formed++;
            }

            while (formed == required) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    start = left;
                }

                char leftChar = s[left];
                window[leftChar]--;
                if (target[leftChar] > 0 && window[leftChar] < target[leftChar]) {
                    formed--;
                }
                left++;
            }
        }

        return (start == -1) ? "" : s.substr(start, minLen);
    }
};
