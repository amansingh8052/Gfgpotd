# JAVA CODE 

class Solution {
    public int countRevPairs(int[] arr) {
        return mergeSortAndCount(arr, 0, arr.length - 1);
    }
    
    private int mergeSortAndCount(int[] arr, int low, int high) {
        if (low >= high) return 0;
        
        int mid = (low + high) / 2;
        int count = mergeSortAndCount(arr, low, mid) + mergeSortAndCount(arr, mid + 1, high);
        
        // Count reverse pairs
        int j = mid + 1;
        for (int i = low; i <= mid; i++) {
            while (j <= high && (long)arr[i] > 2L * arr[j]) {
                j++;
            }
            count += (j - (mid + 1));
        }
        
        // Merge the two sorted halves
        merge(arr, low, mid, high);
        return count;
    }
    
    private void merge(int[] arr, int low, int mid, int high) {
        int[] temp = new int[high - low + 1];
        int i = low, j = mid + 1, k = 0;
        
        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }
        while (i <= mid) temp[k++] = arr[i++];
        while (j <= high) temp[k++] = arr[j++];
        
        System.arraycopy(temp, 0, arr, low, temp.length);
    }
}


# C++ CODE 

class Solution {
public:
    int countRevPairs(vector<int> &arr) {
        return mergeSortAndCount(arr, 0, arr.size() - 1);
    }
    
private:
    int mergeSortAndCount(vector<int> &arr, int low, int high) {
        if (low >= high) return 0;
        
        int mid = (low + high) / 2;
        int count = mergeSortAndCount(arr, low, mid) + mergeSortAndCount(arr, mid + 1, high);
        
        // Count reverse pairs
        int j = mid + 1;
        for (int i = low; i <= mid; i++) {
            while (j <= high && (long long)arr[i] > 2LL * arr[j]) {
                j++;
            }
            count += (j - (mid + 1));
        }
        
        // Merge two sorted halves
        merge(arr, low, mid, high);
        return count;
    }
    
    void merge(vector<int> &arr, int low, int mid, int high) {
        vector<int> temp;
        int i = low, j = mid + 1;
        
        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) temp.push_back(arr[i++]);
            else temp.push_back(arr[j++]);
        }
        while (i <= mid) temp.push_back(arr[i++]);
        while (j <= high) temp.push_back(arr[j++]);
        
        for (int k = low; k <= high; k++) {
            arr[k] = temp[k - low];
        }
    }
};

