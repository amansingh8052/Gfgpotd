# JAVA CODE

class Solution {
    int moves = 0;

    public int distCandy(Node root) {
        dfs(root);
        return moves;
    }

    private int dfs(Node node) {
        if (node == null) return 0;

        int left = dfs(node.left);
        int right = dfs(node.right);
        moves += Math.abs(left) + Math.abs(right);
        return node.data + left + right - 1;
    }
}


# C++ CODE



class Solution {
  public:
    int moves = 0;
    int dfs(Node* root) {
        if (!root) return 0;
        int leftExcess = dfs(root->left);
        int rightExcess = dfs(root->right);
        moves += abs(leftExcess) + abs(rightExcess);
        return root->data + leftExcess + rightExcess - 1;
    }

    int distCandy(Node* root) {
        dfs(root);
        return moves;
    }
};
