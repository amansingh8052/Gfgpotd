# JAVA CODE 

class Solution {
    public int powerfulInteger(int[][] intervals, int k) {
        TreeMap<Integer, Integer> map = new TreeMap<>();

        // Mark the start and end+1 of each interval
        for (int[] interval : intervals) {
            map.put(interval[0], map.getOrDefault(interval[0], 0) + 1);
            map.put(interval[1] + 1, map.getOrDefault(interval[1] + 1, 0) - 1);
        }

        int count = 0;
        int prev = 0;
        int powerful = -1;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int point = entry.getKey();

            if (count >= k) {
                // All values between prev and point - 1 are powerful
                powerful = point - 1;
            }

            count += entry.getValue();
            prev = point;
        }

        return powerful;
    }
}

# C++ CODE 


class Solution {
  public:
    int powerfulInteger(vector<vector<int>>& intervals, int k) {
        map<int, int> events;

        //Mark interval start and end+1
        for (auto& interval : intervals) {
            int start = interval[0];
            int end = interval[1];
            events[start] += 1;
            events[end + 1] -= 1;
        }

        int count = 0;
        int prev = 0;
        int powerful = -1;

        // Sweep through the map
        for (auto& [point, delta] : events) {
            if (count >= k) {
                // All numbers from prev to point - 1 are powerful
                powerful = point - 1;
            }
            count += delta;
            prev = point;
        }

        return powerful;
    }
};
