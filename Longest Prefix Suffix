# JAVA CODE 

class Solution {
    int getLPSLength(String s) {
        // code here
        int n = s.length();
        int[] lps = new int[n];
        int len = 0;
        int i = 1;
        
        while(i < n) {
            if(s.charAt(i) == s.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if(len != 0) {
                    len = lps[len-1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps[n-1];
    }
}

#C++ CODE 

class Solution {
  public:
    int getLPSLength(string &s) {
        int n = s.length();
        vector<int> lps(n, 0);  // LPS array
        int len = 0;  // length of the previous longest prefix suffix
        int i = 1;

        while (i < n) {
            if (s[i] == s[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];  // backtrack
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps[n - 1];  // longest proper prefix which is also a suffix
    }
};
