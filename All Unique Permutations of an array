# JAVA CODE


class Solution {
    public static ArrayList<ArrayList<Integer>> uniquePerms(int[] arr) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Arrays.sort(arr);
        boolean[] used = new boolean[arr.length];
        backtrack(arr, new ArrayList<>(), used, result);
        return result;
    }

    private static void backtrack(int[] arr, ArrayList<Integer> current, boolean[] used, ArrayList<ArrayList<Integer>> result) {
        if (current.size() == arr.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (used[i]) continue;
            if (i > 0 && arr[i] == arr[i - 1] && !used[i - 1]) continue;

            used[i] = true;
            current.add(arr[i]);

            backtrack(arr, current, used, result);

            used[i] = false;
            current.remove(current.size() - 1);
        }
    }
}


# C++ CODE 


class Solution {
  public:
    vector<vector<int>> uniquePerms(vector<int>& arr) {
        vector<vector<int>> result;
        vector<int> current;
        vector<bool> used(arr.size(), false);
        
        sort(arr.begin(), arr.end());
        backtrack(arr, used, current, result);
        
        return result;
    }

  private:
    void backtrack(vector<int>& arr, vector<bool>& used, vector<int>& current, vector<vector<int>>& result) {
        if (current.size() == arr.size()) {
            result.push_back(current);
            return;
        }

        for (int i = 0; i < arr.size(); i++) {
            if (used[i]) continue;

            if (i > 0 && arr[i] == arr[i-1] && !used[i-1]) continue;

            used[i] = true;
            current.push_back(arr[i]);

            backtrack(arr, used, current, result);

            used[i] = false;
            current.pop_back();
        }
    }
};
