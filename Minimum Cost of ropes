# JAVA CODE 


class Solution {
    public static int minCost(int[] arr) {
        // code here
         if(arr.length <= 1){
            return 0;
        }
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int num: arr){
            minHeap.add(num);
        }
        int total = 0;
        while(minHeap.size() > 1){
            int first = minHeap.poll();
            int sec = minHeap.poll();
            int cost = first+ sec;
            total += cost;
            minHeap.add(cost);
        }
        return total;
    }
}


# C++ CODE



class Solution {
public:
    int minCost(vector<int>& arr) {
        if (arr.size() <= 1)
            return 0;
        
        priority_queue<int, vector<int>, greater<int>> minHeap(arr.begin(), arr.end());
        int total = 0;
        
        while (minHeap.size() > 1) {
            int first = minHeap.top();
            minHeap.pop();
            int second = minHeap.top();
            minHeap.pop();
            
            int cost = first + second;
            total += cost;
            minHeap.push(cost);
        }
        
        return total;
    }
};
