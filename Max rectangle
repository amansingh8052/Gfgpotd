# JAVA CODE 


class Solution {
    static int maxArea(int mat[][]) {
        int n = mat.length;
        int m = mat[0].length;

        int[] height = new int[m];
        int maxArea = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 0)
                    height[j] = 0;
                else
                    height[j] += 1;
            }

            maxArea = Math.max(maxArea, largestRectangleArea(height));
        }

        return maxArea;
    }

    private static int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int maxArea = 0;

        for (int i = 0; i <= n; i++) {
            int h = (i == n) ? 0 : heights[i];

            while (!st.isEmpty() && h < heights[st.peek()]) {
                int height = heights[st.pop()];
                int right = i;
                int left = st.isEmpty() ? 0 : st.peek() + 1;
                maxArea = Math.max(maxArea, height * (right - left));
            }
            st.push(i);
        }

        return maxArea;
    }
}



# C++ CODE 


class Solution {
  public:
    int maxArea(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        
        vector<int> height(m, 0);
        int maxArea = 0;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 0)
                    height[j] = 0;
                else
                    height[j] += 1;
            }
            
            maxArea = max(maxArea, largestRectangleArea(height));
        }
        
        return maxArea;
    }
    
  private:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int maxArea = 0;
        
        for (int i = 0; i <= n; i++) {
            int h = (i == n ? 0 : heights[i]);
            
            while (!st.empty() && h < heights[st.top()]) {
                int height = heights[st.top()];
                st.pop();
                int right = i;
                int left = st.empty() ? 0 : st.top() + 1;
                maxArea = max(maxArea, height * (right - left));
            }
            st.push(i);
        }
        
        return maxArea;
    }
};
