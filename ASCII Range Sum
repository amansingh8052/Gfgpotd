# JAVA CODE 

class Solution {
    public ArrayList<Integer> asciirange(String s) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = s.length();
        int[] first = new int[26];
        int[] last = new int[26];
        Arrays.fill(first, -1);

        // Record first and last occurrence
        for (int i = 0; i < n; i++) {
            int ch = s.charAt(i) - 'a';
            if (first[ch] == -1)
                first[ch] = i;
            last[ch] = i;
        }

        // Process each character
        for (int i = 0; i < 26; i++) {
            if (first[i] != -1 && last[i] != first[i]) {
                int sum = 0;
                for (int j = first[i] + 1; j < last[i]; j++) {
                    sum += (int) s.charAt(j);
                }
                if (sum > 0)
                    result.add(sum);
            }
        }

        return result;
    }
}

#C++ CODE 

class Solution {
  public:
    vector<int> asciirange(string& s) {
        vector<int> result;
        int n = s.length();
        vector<int> first(26, -1), last(26, -1);

        // Record first and last occurrence of each character
        for (int i = 0; i < n; i++) {
            int ch = s[i] - 'a';
            if (first[ch] == -1)
                first[ch] = i;
            last[ch] = i;
        }

        // For each character, calculate sum between first and last occurrence
        for (int i = 0; i < 26; i++) {
            if (first[i] != -1 && last[i] != first[i]) {
                int sum = 0;
                for (int j = first[i] + 1; j < last[i]; j++) {
                    sum += (int)s[j];
                }
                if (sum > 0)
                    result.push_back(sum);
            }
        }

        return result;
    }
};
