# JAVA CODE 
class Solution {
    public int countConsec(int n) {
        // code here
        if(n <= 1) return 0;
        int[] a = new int[n+1];
        int[] b = new int[n+1];
        
        a[1] = 1;
        b[1] = 1;
        
        for(int i = 2; i <= n; i++){
            a[i] = a[i-1] + b[i-1];
            b[i] = a[i - 1];
        }
        int total = (int)Math.pow(2,n);
        int noConsec = a[n] + b[n];
        return total-noConsec;
    }
}

# C++ CODE 

class Solution {
  public:
    int countConsec(int n) {
        if (n <= 1) return 0;

        // Arrays to hold DP results
        vector<int> a(n + 1, 0);
        vector<int> b(n + 1, 0);

        a[1] = 1;
        b[1] = 1;

        for (int i = 2; i <= n; i++) {
            a[i] = a[i - 1] + b[i - 1];
            b[i] = a[i - 1];
        }

        int noConsec = a[n] + b[n];
        int total = 1 << n;

        return total - noConsec;
    }
};
