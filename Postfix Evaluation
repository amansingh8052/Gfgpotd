# JAVA CODE 


class Solution {
    public int evaluatePostfix(String[] arr) {
        Stack<Integer> stack = new Stack<>();
        
        for (String token : arr) {
            if (isOperator(token)) {
                int b = stack.pop();
                int a = stack.pop();
                int result = 0;
                
                switch (token) {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "*": result = a * b; break;
                    case "/": 
                        result = floorDiv(a, b);
                        break;
                    case "^": 
                        result = (int)Math.pow(a, b); 
                        break;
                }
                stack.push(result);
            } else {
                stack.push(Integer.parseInt(token));
            }
        }
        
        return stack.pop();
    }
    
    private boolean isOperator(String s) {
        return s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/") || s.equals("^");
    }
    
    private int floorDiv(int a, int b) {
        int div = a / b;
        if ((a ^ b) < 0 && a % b != 0) {
            div--;
        }
        return div;
    }
}


# C++ CODE 


class Solution {
  public:
    int evaluatePostfix(vector<string>& arr) {
        stack<int> st;
        
        for (string& token : arr) {
            if (isOperator(token)) {
                int b = st.top(); st.pop();
                int a = st.top(); st.pop();
                int result = 0;
                
                if (token == "+") result = a + b;
                else if (token == "-") result = a - b;
                else if (token == "*") result = a * b;
                else if (token == "/") result = floorDiv(a, b);
                else if (token == "^") result = pow(a, b);
                
                st.push(result);
            } else {
                st.push(stoi(token));
            }
        }
        
        return st.top();
    }
    
  private:
    bool isOperator(const string& s) {
        return (s == "+" || s == "-" || s == "*" || s == "/" || s == "^");
    }
    
    int floorDiv(int a, int b) {
        int div = a / b;
        if ((a ^ b) < 0 && a % b != 0) {
            div--;
        }
        return div;
    }
};
