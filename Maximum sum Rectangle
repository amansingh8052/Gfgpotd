# JAVA CODE 

class Solution {
    public int maxRectSum(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int maxSum = Integer.MIN_VALUE;

        for (int top = 0; top < n; top++) {
            int[] temp = new int[m];
            for (int bottom = top; bottom < n; bottom++) {
                for (int col = 0; col < m; col++) {
                    temp[col] += mat[bottom][col];
                }
                // Apply Kadane's algorithm on temp
                int currentMax = kadane(temp);
                maxSum = Math.max(maxSum, currentMax);
            }
        }
        return maxSum;
    }

    private int kadane(int[] arr) {
        int maxEndingHere = arr[0];
        int maxSoFar = arr[0];
        for (int i = 1; i < arr.length; i++) {
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        return maxSoFar;
    }
}


#C++ CODE 

class Solution {
  public:
    int maxRectSum(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        int maxSum = INT_MIN;

        for (int top = 0; top < n; ++top) {
            vector<int> temp(m, 0);

            for (int bottom = top; bottom < n; ++bottom) {
                // Build the column sum between rows `top` and `bottom`
                for (int col = 0; col < m; ++col) {
                    temp[col] += mat[bottom][col];
                }

                // Apply 1D Kadane's algorithm to the `temp` array
                int currentMax = kadane(temp);
                maxSum = max(maxSum, currentMax);
            }
        }

        return maxSum;
    }

  private:
    int kadane(vector<int> &arr) {
        int maxSoFar = arr[0];
        int maxEndingHere = arr[0];
        for (int i = 1; i < arr.size(); ++i) {
            maxEndingHere = max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = max(maxSoFar, maxEndingHere);
        }
        return maxSoFar;
    }
};
