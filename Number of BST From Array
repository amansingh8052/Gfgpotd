# JAVA CODE 


class Solution {
    public ArrayList<Integer> countBSTs(int[] arr) {
        // Code here
        int n = arr.length;
        ArrayList<Integer> result = new ArrayList<>();
        long[] catalan = new long[n+1];
        catalan[0] = 1;
        for(int i = 1; i<= n; i++) {
            for(int j = 0; j < i; j++) {
                catalan[i] += catalan[j]*catalan[i-j-1];
            }
        }
        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++) {
            int left = i;
            int right = n-i-1;
            long count = catalan[left]*catalan[right];
            map.put(sorted[i], (int)count);
        }
        for(int val : arr) {
            result.add(map.get(val));
        }
        return result;
    }
}


# C++ CODE 


class Solution {
  public:
    vector<int> countBSTs(vector<int>& arr) {
        int n = arr.size();
        vector<int> result;
        
        vector<long long> catalan(n + 1, 0);
        catalan[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                catalan[i] += catalan[j] * catalan[i - j - 1];
            }
        }
        
        vector<int> sorted = arr;
        sort(sorted.begin(), sorted.end());
        
        unordered_map<int, long long> bstCount;
        for (int i = 0; i < n; i++) {
            int left = i;
            int right = n - i - 1;
            bstCount[sorted[i]] = catalan[left] * catalan[right];
        }
        
        for (int val : arr) {
            result.push_back((int)bstCount[val]);
        }
        
        return result;
    }
};
