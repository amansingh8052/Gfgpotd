# JAVA CODE


class Solution {
    public int getMinDiff(int[] arr, int k) {
        int n = arr.length;
        Arrays.sort(arr);

        int ans = arr[n - 1] - arr[0];

        for (int i = 1; i < n; i++) {
            if (arr[i] - k < 0) continue;

            int minHeight = Math.min(arr[0] + k, arr[i] - k);
            int maxHeight = Math.max(arr[n - 1] - k, arr[i - 1] + k);

            ans = Math.min(ans, maxHeight - minHeight);
        }

        return ans;
    }
}


# C++ CODE 


class Solution {
  public:
    int getMinDiff(vector<int> &arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());

        int ans = arr[n - 1] - arr[0];

        for (int i = 1; i < n; i++) {
            if (arr[i] - k < 0) continue;

            int minHeight = min(arr[0] + k, arr[i] - k);
            int maxHeight = max(arr[n - 1] - k, arr[i - 1] + k);

            ans = min(ans, maxHeight - minHeight);
        }

        return ans;
    }
};
