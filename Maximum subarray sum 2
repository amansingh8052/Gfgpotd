# JAVA CODE 


class Solution {
    public int maxSubarrSum(int[] arr, int a, int b) {
        int n = arr.length;
        long[] prefix = new long[n + 1];
        
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }

        int ans = Integer.MIN_VALUE;
        Deque<Integer> dq = new ArrayDeque<>();

        for (int r = a; r <= n; r++) {
            int left = r - b;
            int right = r - a;

            while (!dq.isEmpty() && dq.peekFirst() < left) {
                dq.pollFirst();
            }

            if (right >= 0) {
                while (!dq.isEmpty() && prefix[dq.peekLast()] >= prefix[right]) {
                    dq.pollLast();
                }
                dq.offerLast(right);
            }

            if (!dq.isEmpty()) {
                ans = Math.max(ans, (int)(prefix[r] - prefix[dq.peekFirst()]));
            }
        }
        return ans;
    }
}


# C++ CODE


class Solution {
  public:
    int maxSubarrSum(vector<int>& arr, int a, int b) {
        int n = arr.size();
        vector<long long> prefix(n + 1, 0);

        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + arr[i];
        }

        long long ans = LLONG_MIN;
        deque<int> dq; 

        for (int r = a; r <= n; r++) {
            int left = r - b;
            int right = r - a;

            while (!dq.empty() && dq.front() < left) {
                dq.pop_front();
            }

            if (right >= 0) {
                while (!dq.empty() && prefix[dq.back()] >= prefix[right]) {
                    dq.pop_back();
                }
                dq.push_back(right);
            }

            if (!dq.empty()) {
                ans = max(ans, prefix[r] - prefix[dq.front()]);
            }
        }
        return (int)ans;
    }
};
