# JAVA CODE 

class Solution {
    public static void rotateDeque(Deque<Integer> dq, int type, int k) {
        if (dq.isEmpty()) return;
        
        int n = dq.size();
        k = k % n; 

        if (type == 1) {
            for (int i = 0; i < k; i++) {
                int val = dq.pollLast();
                dq.offerFirst(val);
            }
        } else if (type == 2) {
            for (int i = 0; i < k; i++) {
                int val = dq.pollFirst();
                dq.offerLast(val); 
            }
        }
    }
}


# C++ CODE 


class Solution {
  public:
    void rotateDeque(deque<int>& dq, int type, int k) {
        if (dq.empty()) return;
        
        int n = dq.size();
        k = k % n;
        
        if (type == 1) {
            for (int i = 0; i < k; i++) {
                int val = dq.back();
                dq.pop_back();
                dq.push_front(val);
            }
        } else if (type == 2) {
            for (int i = 0; i < k; i++) {
                int val = dq.front();
                dq.pop_front();
                dq.push_back(val);
            }
        }
    }
};
