# JAVA CODE 


class Solution {
    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        int n = arr.length;
        Deque<Integer> maxDeque = new ArrayDeque<>();
        Deque<Integer> minDeque = new ArrayDeque<>();
        
        int i = 0, bestStart = 0, bestLen = 0;
        
        for (int j = 0; j < n; j++) {
            while (!maxDeque.isEmpty() && arr[maxDeque.peekLast()] < arr[j])
                maxDeque.pollLast();
            maxDeque.addLast(j);
            
            while (!minDeque.isEmpty() && arr[minDeque.peekLast()] > arr[j])
                minDeque.pollLast();
            minDeque.addLast(j);
            
            while (arr[maxDeque.peekFirst()] - arr[minDeque.peekFirst()] > x) {
                i++;
                if (maxDeque.peekFirst() < i) maxDeque.pollFirst();
                if (minDeque.peekFirst() < i) minDeque.pollFirst();
            }
            
            if (j - i + 1 > bestLen) {
                bestLen = j - i + 1;
                bestStart = i;
            }
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        for (int k = bestStart; k < bestStart + bestLen; k++) {
            result.add(arr[k]);
        }
        return result;
    }
}


# C++ CODE


class Solution {
  public:
    vector<int> longestSubarray(vector<int>& arr, int x) {
        int n = arr.size();
        deque<int> maxDeque, minDeque;
        
        int i = 0, bestStart = 0, bestLen = 0;
        
        for (int j = 0; j < n; j++) {
            while (!maxDeque.empty() && arr[maxDeque.back()] < arr[j])
                maxDeque.pop_back();
            maxDeque.push_back(j);
            
            while (!minDeque.empty() && arr[minDeque.back()] > arr[j])
                minDeque.pop_back();
            minDeque.push_back(j);
            
            while (!maxDeque.empty() && !minDeque.empty() &&
                   arr[maxDeque.front()] - arr[minDeque.front()] > x) {
                i++;
                if (!maxDeque.empty() && maxDeque.front() < i) maxDeque.pop_front();
                if (!minDeque.empty() && minDeque.front() < i) minDeque.pop_front();
            }
            
            if (j - i + 1 > bestLen) {
                bestLen = j - i + 1;
                bestStart = i;
            }
        }
        
        vector<int> result;
        for (int k = bestStart; k < bestStart + bestLen; k++) {
            result.push_back(arr[k]);
        }
        return result;
    }
};
