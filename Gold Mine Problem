# JAVA CODE 

class Solution {
    public int maxGold(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        int[][] dp = new int[n][m];

        // Traverse the matrix from right to left
        for (int col = m - 1; col >= 0; col--) {
            for (int row = 0; row < n; row++) {
                // If miner is in the last column
                int right = (col == m - 1) ? 0 : dp[row][col + 1];
                
                // Diagonal up-right
                int upRight = (row > 0 && col < m - 1) ? dp[row - 1][col + 1] : 0;
                
                // Diagonal down-right
                int downRight = (row < n - 1 && col < m - 1) ? dp[row + 1][col + 1] : 0;
                
                dp[row][col] = mat[row][col] + Math.max(right, Math.max(upRight, downRight));
            }
        }

        // Find the maximum value in the first column
        int maxGold = 0;
        for (int i = 0; i < n; i++) {
            maxGold = Math.max(maxGold, dp[i][0]);
        }

        return maxGold;
    }
}

C++ CODE 

class Solution {
  public:
    int maxGold(vector<vector<int>>& mat) {
        int n = mat.size();       // Number of rows
        int m = mat[0].size();    // Number of columns

        vector<vector<int>> dp(n, vector<int>(m, 0));

        // Traverse the grid from right to left
        for (int col = m - 1; col >= 0; col--) {
            for (int row = 0; row < n; row++) {
                int right = (col == m - 1) ? 0 : dp[row][col + 1];

                int upRight = (row > 0 && col < m - 1) ? dp[row - 1][col + 1] : 0;

                int downRight = (row < n - 1 && col < m - 1) ? dp[row + 1][col + 1] : 0;

                dp[row][col] = mat[row][col] + max({right, upRight, downRight});
            }
        }

        // The answer is the maximum in the first column
        int maxGold = 0;
        for (int i = 0; i < n; i++) {
            maxGold = max(maxGold, dp[i][0]);
        }

        return maxGold;
    }
};
