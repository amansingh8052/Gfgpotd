# JAVA CODE 

/*
class Node {
    int data;
    Node next;

    Node(int key) {
        data = key;
        next = null;
    }
}
*/

class Solution {
    public Node mergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        Node middle = getMiddle(head);
        Node nextOfMiddle = middle.next;
        middle.next = null;
        
        Node left = mergeSort(head);
        Node right = mergeSort(nextOfMiddle);
        
        return sortedMerge(left, right);
    }
    
    private Node sortedMerge(Node a, Node b) {
        if (a == null) return b;
        if (b == null) return a;
        
        Node result;
        if (a.data <= b.data) {
            result = a;
            result.next = sortedMerge(a.next, b);
        } else {
            result = b;
            result.next = sortedMerge(a, b.next);
        }
        return result;
    }
    
    private Node getMiddle(Node head) {
        if (head == null) return head;
        
        Node slow = head;
        Node fast = head;
        
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}


# C++ CODE 

/*
class Node {
public:
    int data;
    Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/

class Solution {
  public:
    Node* mergeSort(Node* head) {
        if (!head || !head->next) {
            return head;
        }

        Node* middle = getMiddle(head);
        Node* nextOfMiddle = middle->next;
        middle->next = NULL;

        Node* left = mergeSort(head);
        Node* right = mergeSort(nextOfMiddle);

        return sortedMerge(left, right);
    }

  private:
    Node* sortedMerge(Node* a, Node* b) {
        if (!a) return b;
        if (!b) return a;

        Node* result = nullptr;
        if (a->data <= b->data) {
            result = a;
            result->next = sortedMerge(a->next, b);
        } else {
            result = b;
            result->next = sortedMerge(a, b->next);
        }
        return result;
    }

    Node* getMiddle(Node* head) {
        if (!head) return head;

        Node* slow = head;
        Node* fast = head;

        while (fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};
